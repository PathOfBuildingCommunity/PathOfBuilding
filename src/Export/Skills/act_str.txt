-- Path of Building
--
-- Active Strength skill gems
-- Skill data (c) Grinding Gear Games
--
local skills, mod, flag, skill = ...

#skill Absolution
#flags spell minion duration area
	minionList = {
		"AbsolutionTemplarJudge",
	},
	statMap = {
		["sentinel_minion_cooldown_speed_+%"] = {
			mod("MinionModifier", "LIST", { mod = mod("CooldownRecovery", "INC", nil, 0, 0) })
		},
		["skill_physical_damage_%_to_convert_to_lightning"] = {
			mod("SkillPhysicalDamageConvertToLightning", "BASE", nil),
			mod("MinionModifier", "LIST", { mod = mod("SkillPhysicalDamageConvertToLightning", "BASE", nil, 0, 0) })
		},
		["damage_+%"] = {
			mod("MinionModifier", "LIST", { mod = mod("Damage", "INC", nil) })
		},
	},
#baseMod skill("radius", 25)
#mods

#skill AbyssalCry
#flags warcry area duration
	statMap = {
		["skill_empowers_next_x_melee_attacks"] = {
			mod("InfernalExertedAttacks", "BASE", nil),
		},
		["infernal_cry_covered_in_ash_fire_damage_taken_"] = {
			mod("InfernalAshEffectPer5MP", "BASE", nil),
		},
		["infernal_cry_covered_in_ash_fire_damage_taken_%_per_5_monster_power"] = {
			mod("InfernalFireTakenPer5MP", "BASE", nil),
		},
	},
#baseMod skill("radius", 60)
#baseMod skill("radiusLabel", "Warcry area:")
#baseMod skill("radiusSecondary", 22)
#baseMod skill("radiusSecondaryLabel", "Explosion area:")
#mods

#skill InfernalCryOnHitExplosion
#flags attack melee area
#baseMod skill("showAverage", true)
#mods

#skill TotemMelee
#flags attack melee totem duration
	statMap = {
		["melee_ancestor_totem_grant_owner_attack_speed_+%_final"] = {
			mod("Speed", "MORE", nil, ModFlag.Attack, 0, { type = "GlobalEffect", effectType = "Buff" }),
		},
		["ancestor_totem_buff_effect_+%"] = {
			mod("BuffEffect", "INC", nil)
		},
	},
#baseMod skill("allowTotemBuff", true)
#baseMod skill("thisIsNotABuff", true)
#mods

#skill AncestralCry
#flags warcry area duration
	statMap = {
		["skill_empowers_next_x_melee_attacks"] = {
			mod("AncestralExertedAttacks", "BASE", nil),
		},
		["ancestral_cry_x_melee_range_per_5_monster_power"] = {
			mod("AncestralMeleeWeaponRangePer5MP", "BASE", nil),
		},
		["ancestral_cry_physical_damage_reduction_rating_per_5_MP"] = {
			mod("AncestralArmourPer5MP", "BASE", nil),
		},
		["ancestral_cry_max_physical_damage_reduction_rating"] = {
			mod("AncestralArmourMax", "BASE", nil),
		},
		["physical_damage_reduction_rating_+%"] = {
			mod("AncestralArmourMax", "INC", nil),
		},
	},
#baseMod skill("radius", 60)
#mods

#skill AncestorTotemSlam
#flags attack melee totem area duration
	statMap = {
		["slam_ancestor_totem_grant_owner_melee_damage_+%_final"] = {
			mod("Damage", "MORE", nil, ModFlag.Melee, 0, { type = "GlobalEffect", effectType = "Buff", effectName = "Ancestral Warchief" }),
		},
	},
#baseMod skill("allowTotemBuff", true)
#baseMod skill("thisIsNotABuff", true)
#mods

#skill VaalAncestralWarchief
#flags attack melee totem area duration
	statMap = {
		["slam_ancestor_totem_grant_owner_melee_damage_+%_final"] = {
			mod("Damage", "MORE", nil, ModFlag.Melee, 0, { type = "GlobalEffect", effectType = "Buff", effectName = "Ancestral Warchief" }),
		},
	},
#baseMod skill("allowTotemBuff", true)
#baseMod skill("thisIsNotABuff", true)
#mods

#skill Anger
#flags spell aura area
	statMap = {
		["attack_minimum_added_fire_damage"] = {
			mod("FireMin", "BASE", nil, 0, KeywordFlag.Attack, { type = "GlobalEffect", effectType = "Aura" }),
		},
		["attack_maximum_added_fire_damage"] = {
			mod("FireMax", "BASE", nil, 0, KeywordFlag.Attack, { type = "GlobalEffect", effectType = "Aura" }),
		},
		["spell_minimum_added_fire_damage"] = {
			mod("FireMin", "BASE", nil, 0, KeywordFlag.Spell, { type = "GlobalEffect", effectType = "Aura" }),
		},
		["spell_maximum_added_fire_damage"] = {
			mod("FireMax", "BASE", nil, 0, KeywordFlag.Spell, { type = "GlobalEffect", effectType = "Aura" }),
		},
		["burn_damage_+%"] = {
			mod("FireDamage", "INC", nil, 0, KeywordFlag.FireDot, { type = "GlobalEffect", effectType = "Aura" }),
		},
		["base_movement_velocity_+%"] = {
			mod("MovementSpeed", "INC", nil, 0, 0, { type = "GlobalEffect", effectType = "Aura" }),
		},
	},
#baseMod skill("radius", 40)
#mods

#skill AnimateArmour
#flags spell minion 
	minionHasItemSet = true,
	minionUses = {
		["Weapon 1"] = true,
		["Weapon 2"] = true,
		["Helmet"] = true,
		["Body Armour"] = true,
		["Gloves"] = true,
		["Boots"] = true,
	},
	minionList = {
		"AnimatedArmour",
	},
	statMap = {
		["maximum_life_+%"] = {
			mod("MinionModifier", "LIST", { mod = mod("Life", "INC", nil) }),
		},
		["base_movement_velocity_+%"] =  {
			mod("MinionModifier", "LIST", { mod = mod("MovementSpeed", "INC", nil) }),
		},
		["melee_physical_damage_+%"] = {
			mod("MinionModifier", "LIST", { mod = mod("PhysicalDamage", "INC", nil, ModFlag.Melee) }),
		},
		["attack_minimum_added_physical_damage"] = {
			mod("MinionModifier", "LIST", { mod = mod("PhysicalMin", "BASE", nil, 0, KeywordFlag.Attack) }),
		},
		["attack_maximum_added_physical_damage"] = {
			mod("MinionModifier", "LIST", { mod = mod("PhysicalMax", "BASE", nil, 0, KeywordFlag.Attack) }),
		},
	},
#mods

#skill BattlemagesCry
#flags area duration warcry
	statMap = {
		["skill_empowers_next_x_melee_attacks"] = {
			mod("BattlemageExertedAttacks", "BASE", nil),
		},
		["divine_cry_additive_spell_damage_modifiers_apply_to_attack_damage_at_%_value_per_5_power_up_to_150%"] = {
			mod("BattlemageSpellIncreaseApplyToAttackPer5MP", "BASE", nil),
		},
		["divine_cry_critical_strike_chance_+%_per_5_power_up_to_cap%"] = {
			mod("BattlemageCritChancePer5MP", "BASE", nil),
		},
	},
#baseMod skill("radius", 60)
#mods

#skill BattlemagesCrySupport
#mods

#skill Berserk
#flags spell
	statMap = {
		["berserk_attack_damage_+%_final"] = {
			mod("Damage", "MORE", nil, ModFlag.Attack, 0, { type = "GlobalEffect", effectType = "Buff" }),
		},
		["berserk_attack_speed_+%_final"] = {
			mod("Speed", "MORE", nil, ModFlag.Attack, 0, { type = "GlobalEffect", effectType = "Buff" }),
		},
		["berserk_movement_speed_+%_final"] = {
			mod("MovementSpeed", "MORE", nil, 0, 0, { type = "GlobalEffect", effectType = "Buff" }),
		},
		["berserk_base_damage_taken_+%_final"] = {
			mod("DamageTaken", "MORE", nil, 0, 0, { type = "GlobalEffect", effectType = "Buff" }),
		},
		["attack_damage_+%"] = {
			mod("Damage", "INC", nil, ModFlag.Attack, 0, { type = "GlobalEffect", effectType = "Buff" }),
		},
		["berserk_spell_damage_+%_final"] = {
			mod("Damage", "MORE", nil, ModFlag.Spell, 0, { type = "GlobalEffect", effectType = "Buff" }),
		},
	},
#mods

#skill Bladestorm
#flags attack melee area duration
	parts = {
		{
			name = "Attack",
		},
		{
			name = "Bladestorm",
		},
	},
	statMap = {
		["bladestorm_storm_damage_+%_final"] = {
			mod("Damage", "MORE", nil, 0, 0, { type = "SkillPart", skillPart = 2 }),
		},
		["bladestorm_blood_stance_ailment_damage_+%"] = {
			mod("Damage", "INC", nil, 0, KeywordFlag.Ailment, { type = "SkillPart", skillPart = 2 }, { type = "Condition", var = "BloodStance" }),
		},
		["bladestorm_attack_speed_+%_final_while_in_bloodstorm"] = {
			mod("Speed", "MORE", nil, ModFlag.Attack, 0, { type = "Condition", var = "BladestormInBloodstorm" }),
		},
		["bladestorm_movement_speed_+%_while_in_sandstorm"] = {
			mod("MovementSpeed", "INC", nil, 0, 0, { type = "GlobalEffect", effectType = "Buff", effectName = "Sandstorm", effectCond = "BladestormInSandstorm" }),
		},
	},
#baseMod skill("radius", 24)
#baseMod skill("radiusLabel", "Area of initial attack:")
#baseMod skill("radiusSecondary", 20)
#baseMod skill("radiusSecondaryLabel", "Area of bladestorms:")
#baseMod mod("BleedChance", "BASE", 100, ModFlag.Attack, 0, { type = "Condition", var = "BloodStance" })
#mods

#skill BloodSandStance
#flags spell
	statMap = {
		["blood_sand_stance_melee_skills_area_of_effect_+%_final_in_blood_stance"] = {
			mod("AreaOfEffect", "MORE", nil, 0, 0, { type = "GlobalEffect", effectType = "Buff", effectName = "Blood", effectCond = "BloodStance"}, { type = "SkillType", skillType = SkillType.Melee })
		},
		["blood_sand_stance_melee_skills_area_damage_+%_final_in_blood_stance"] = {
			mod("Damage", "MORE", nil, ModFlag.Area, 0, { type = "GlobalEffect", effectType = "Buff", effectName = "Blood", effectCond = "BloodStance"}, { type = "SkillType", skillType = SkillType.Melee })
		},
		["blood_sand_stance_melee_skills_area_of_effect_+%_final_in_sand_stance"] = {
			mod("AreaOfEffect", "MORE", nil, 0, 0, { type = "GlobalEffect", effectType = "Buff", effectName = "Sand", effectCond = "SandStance"}, { type = "SkillType", skillType = SkillType.Melee })
		},
		["blood_sand_stance_melee_skills_area_damage_+%_final_in_sand_stance"] = {
			mod("Damage", "MORE", nil, ModFlag.Area, 0, { type = "GlobalEffect", effectType = "Buff", effectName = "Sand", effectCond = "SandStance"}, { type = "SkillType", skillType = SkillType.Melee })
		},
		["projectile_attack_damage_+%_in_blood_stance"] = {
			mod("Damage", "INC", nil, bit.bor(ModFlag.Attack, ModFlag.Projectile), 0, { type = "GlobalEffect", effectType = "Buff", effectName = "Blood", effectCond = "BloodStance"})
		},
		["projectile_speed_+%_in_sand_stance"] = {
			mod("ProjectileSpeed", "INC", nil, 0, 0, { type = "GlobalEffect", effectType = "Buff", effectName = "Sand", effectCond = "SandStance"})
		},
		["spell_area_damage_+%_in_blood_stance"] = {
			mod("Damage", "INC", nil, bit.bor(ModFlag.Area, ModFlag.Spell), 0, { type = "GlobalEffect", effectType = "Buff", effectName = "Blood", effectCond = "BloodStance"})
		},
		["spell_area_of_effect_+%_in_sand_stance"] = {
			mod("AreaOfEffect", "INC", nil, bit.bor(ModFlag.Area, ModFlag.Spell), 0, { type = "GlobalEffect", effectType = "Buff", effectName = "Sand", effectCond = "SandStance"})
		},
	},
#mods

#skill Boneshatter
#flags attack melee area duration
	parts = {
		{
			name = "Attack",
			area = false,
		},
		{
			name = "Pulse",
			area = true,
		},
	},
	preDotFunc = function(activeSkill, output, breakdown)
		local t_insert = table.insert
		local s_format = string.format
		local ipairs = ipairs

		local dmgTypeList = {"Physical", "Lightning", "Cold", "Fire", "Chaos"}

		local physBase = activeSkill.skillData.SelfDamageTakenLife * math.max(activeSkill.skillModList:Sum("BASE", nil, "Multiplier:TraumaStacks"), 1)
		local totalTakenAs = activeSkill.skillModList:Sum("BASE", nil, "PhysicalDamageTakenAsLightning","PhysicalDamageTakenAsCold","PhysicalDamageTakenAsFire","PhysicalDamageTakenAsChaos") / 100
		
		local BSDamageTaken = {}

		local totalDamageTaken = 0

		for _, damageType in ipairs(dmgTypeList) do
			local damageTakenAs = 1
			
			if damageType ~= "Physical" then
				damageTakenAs = (activeSkill.skillModList:Sum("BASE", nil, "PhysicalDamageTakenAs"..damageType) or 0) / 100
			else
				damageTakenAs = math.max(1 - totalTakenAs, 0)
			end

			if damageTakenAs ~= 0 then

				if(totalTakenAs > 1) then
					damageTakenAs = damageTakenAs / totalTakenAs
				end

				local damage = physBase * damageTakenAs
				
				local baseTakenInc = activeSkill.skillModList:Sum("INC", nil, "DamageTaken", damageType.."DamageTaken", "DamageTakenWhenHit", damageType.."DamageTakenWhenHit")
				local baseTakenMore = activeSkill.skillModList:More(nil, "DamageTaken", damageType.."DamageTaken","DamageTakenWhenHit", damageType.."DamageTakenWhenHit")
				if (damageType == "Lightning" or damageType == "Cold" or damageType == "Fire") then
					baseTakenInc = baseTakenInc + activeSkill.skillModList:Sum("INC", nil, "ElementalDamageTaken", "ElementalDamageTakenWhenHit")
					baseTakenMore = baseTakenMore * activeSkill.skillModList:More(nil, "ElementalDamageTaken", "ElementalDamageTakenWhenHit")
				end
				local damageTakenMods = math.max((1 + baseTakenInc / 100) * baseTakenMore, 0)
				local reduction = activeSkill.skillModList:Flag(nil, "SelfIgnore".."Base"..damageType.."DamageReduction") and 0 or output["Base"..damageType.."DamageReductionWhenHit"] or output["Base"..damageType.."DamageReduction"]
				local resist = activeSkill.skillModList:Flag(nil, "SelfIgnore"..damageType.."Resistance") and 0 or output[damageType.."ResistWhenHit"] or output[damageType.."Resist"]
				local armourReduct = 0
				local resMult = 1 - resist / 100
				local reductMult = 1

				local percentOfArmourApplies = math.min((not activeSkill.skillModList:Flag(nil, "ArmourDoesNotApplyTo"..damageType.."DamageTaken") and activeSkill.skillModList:Sum("BASE", nil, "ArmourAppliesTo"..damageType.."DamageTaken") or 0), 100)
				if percentOfArmourApplies > 0 then
					local effArmour = (output.Armour * percentOfArmourApplies / 100) * (1 + output.ArmourDefense)
					local effDamage = damage * resMult
					armourReduct = round(effArmour ~= 0 and damage * resMult ~= 0 and (effArmour / (effArmour + effDamage * 5) * 100) or 0)
					armourReduct = math.min(output.DamageReductionMax, armourReduct)
				end
				reductMult = (1 - math.max(math.min(output.DamageReductionMax, armourReduct + reduction), 0) / 100) * damageTakenMods
				local combinedMult = resMult * reductMult
				local finalDamage = damage * combinedMult
				totalDamageTaken = totalDamageTaken + finalDamage

				if breakdown then
					t_insert(BSDamageTaken, damageType.." Damage Taken")
					t_insert(BSDamageTaken, s_format("^8=^7 %d^8 (Base Damage) * ^7%.2f^8 (Damage taken as %s)", physBase, damageTakenAs, damageType))
					t_insert(BSDamageTaken, s_format("^8=^7 %d^8 (%s Damage) * ^7%.4f^8 (Damage taken multi)", damage, damageType, combinedMult))
					t_insert(BSDamageTaken, s_format("^8=^7 %d^8 (%s Damage taken)", finalDamage, damageType))
				end
			end
		end

		if breakdown then
			t_insert(BSDamageTaken, "Total damage taken: "..round(totalDamageTaken))
			breakdown.BSDamageTaken = BSDamageTaken
			output.BSDamageTaken = totalDamageTaken
		end
	end,
	statMap = {
		["trauma_strike_damage_+%_final_per_trauma"] = {
			mod("Damage", "MORE", nil, 0, 0, { type = "Multiplier", var = "TraumaStacks" }),
		},
		["attack_speed_+%_per_trauma"] = {
			mod("Speed", "INC", nil, ModFlag.Attack, 0, { type = "Multiplier", var = "TraumaStacks" }),
			mod("SpeedPerTrauma", "INC", nil, ModFlag.Attack, 0),
		},
		["trauma_strike_self_damage_per_trauma"] = {
			skill("SelfDamageTakenLife", nil),
		},
		["trauma_base_duration_ms"] = {
			skill("duration", nil),
			div = 1000,
		},
	},
#baseMod skill("radius", 14, { type = "SkillPart", skillPart = 2 })
#mods

#skill ChainStrike
#flags attack melee area
	statMap = {
		["chain_strike_gain_x_rage_if_attack_hits"] = {
			flag("Condition:CanGainRage", { type = "GlobalEffect", effectType = "Buff" }),
		},
		["chain_strike_cone_radius_+_per_x_rage"] = {
			mod("AreaOfEffect", "BASE", nil, 0, 0, { type = "Multiplier", var = "Rage", div = 5 }),
			div = 5,
		},
	},
#baseMod skill("radius", 24)
#mods

#skill Cleave
#flags attack melee area
#baseMod skill("radius", 20)
#mods

#skill VaalCleave
#flags attack area duration melee
#mods

#skill ConsecratedPath
#flags attack melee area duration
	statMap = {
		["groundslam_damage_to_close_targets_+%_final"] = {
			mod("Damage", "MORE", nil, ModFlag.Hit, 0, { type = "Condition", var = "AtCloseRange" })
		},
	},
#baseMod skill("radius", 23)
#mods

#skill CorruptingFever
#flags spell duration
#baseMod skill("debuff", true)
#baseMod mod("Multiplier:CorruptingFeverMaxStages", "BASE", 10)
#baseMod mod("Damage", "MORE", 100, ModFlag.Dot, 0, { type = "Multiplier", var = "CorruptingFeverStageAfterFirst"})
#mods

#skill DecoyTotem
#flags spell totem area duration
#baseMod skill("radius", 60)
#mods

#skill DefianceBanner
#flags spell area duration aura banner
	statMap = {
		["evasion_and_physical_damage_reduction_rating_+%"] = {
			mod("ArmourAndEvasion", "INC", nil, 0, 0, { type = "GlobalEffect", effectType = "Aura" }),
		},
		["armour_evasion_banner_critical_strike_chance_+%"] = {
			mod("EnemyCritChance", "INC", nil, 0, 0, { type = "GlobalEffect", effectType = "Aura" }),
		},
	},
#baseMod skill("radius", 46)
#baseMod skill("manaReservationPercent", 0, { type = "Condition", var = "BannerPlanted" })
#baseMod flag("Condition:AffectedByPlacedBanner", { type = "Condition", var = "BannerPlanted" }, { type = "GlobalEffect", effectType = "Buff" })
#mods

#skill Determination
#flags spell aura area
	statMap = {
		["determination_aura_armour_+%_final"] = {
			mod("Armour", "MORE", nil, 0, 0, { type = "GlobalEffect", effectType = "Aura" }),
		},
		["base_physical_damage_reduction_rating"] = {
			mod("Armour", "BASE", nil, 0, 0, { type = "GlobalEffect", effectType = "Aura" }),
		},
		["base_avoid_stun_%"] = {
			mod("AvoidStun", "BASE", nil, 0, 0, { type = "GlobalEffect", effectType = "Aura" }),
		},
		["evasion_rating_%_to_add_as_armour"] = {
			mod("EvasionGainAsArmour", "BASE", nil, 0, 0, { type = "GlobalEffect", effectType = "Aura" }),
		},
	},
#baseMod skill("radius", 40)
#mods

#skill DevouringTotem
#flags spell totem duration
	statMap = {
		["corpse_consumption_life_to_gain"] = {
			skill("lifeLeechPerUse", nil),
		},
		["corpse_consumption_mana_to_gain"] = {
			skill("manaLeechPerUse", nil),
		},
	},
#mods

#skill DominatingBlow
#flags attack melee duration minion
	minionList = {
		"AxisEliteSoldierDominatingBlow",
	},
	statMap = {
		["sentinel_minion_cooldown_speed_+%"] = {
			mod("MinionModifier", "LIST", { mod = mod("CooldownRecovery", "INC", nil, 0, 0) })
		},
		["damage_+%"] = {
			mod("MinionModifier", "LIST", { mod = mod("Damage", "INC", nil) } )
		}
	},
#mods

#skill PuresteelBanner
#flags spell
	statMap = {
		["puresteel_banner_accuracy_rating_+%_final"] = {
			mod("Accuracy", "MORE", nil, 0, 0, { type = "GlobalEffect", effectType = "AuraDebuff" }),
		},
		["attacks_impale_on_hit_%_chance"] = {
			mod("ImpaleChance", "BASE", nil, 0, KeywordFlag.Attack, { type = "GlobalEffect", effectType = "Aura" }),
		},
		["impale_debuff_effect_+%"] = {
			mod("ImpaleEffect", "INC", nil, 0, 0, { type = "GlobalEffect", effectType = "Aura" }),
		},
		["puresteel_banner_damage_+%_final"] = {
			mod("Damage", "MORE", nil, 0, 0, { type = "GlobalEffect", effectType = "AuraDebuff" }),
		},
	},
#baseMod skill("radius", 46)
#baseMod skill("manaReservationPercent", 0, { type = "Condition", var = "BannerPlanted" })
#baseMod flag("Condition:AffectedByPlacedBanner", { type = "Condition", var = "BannerPlanted" }, { type = "GlobalEffect", effectType = "Buff" })
#mods

#skill Earthquake
#flags attack melee area duration
	preDamageFunc = function(activeSkill, output)
		local duration = math.floor(activeSkill.skillData.duration * output.DurationMod * 10)
		activeSkill.skillModList:NewMod("Damage", "INC", activeSkill.skillModList:Sum("INC", activeSkill.skillCfg, "EarthquakeDurationIncDamage") * duration, "Skill:Earthquake")
	end,
	parts = {
		{
			name = "Initial impact",
		},
		{
			name = "Aftershock",
		},
	},
	statMap = {
		["quake_slam_fully_charged_explosion_damage_+%_final"] = {
			mod("Damage", "MORE", nil, 0, bit.bor(KeywordFlag.Hit, KeywordFlag.Ailment), { type = "SkillPart", skillPart = 2 }),
		},
		["earthquake_aftershock_minimum_added_physical_damage"] = {
			mod("PhysicalMin", "BASE", nil, 0, 0, { type = "SkillPart", skillPart = 2 }),
		},
		["earthquake_aftershock_maximum_added_physical_damage"] = {
			mod("PhysicalMax", "BASE", nil, 0, 0, { type = "SkillPart", skillPart = 2 }),
		},
		["earthquake_initial_slam_area_of_effect_+%"] = {
			mod("AreaOfEffect", "INC", nil, 0, 0, { type = "SkillPart", skillPart = 1 })
		},
		["active_skill_additive_spell_damage_modifiers_apply_to_attack_damage_at_%_value"] = {
			flag("SpellDamageAppliesToAttacks"),
			mod("ImprovedSpellDamageAppliesToAttacks", "MAX", nil),
		},
	},
#baseMod skill("showAverage", true, { type = "SkillPart", skillPart = 2 })
#baseMod skill("radius", 18, { type = "SkillPart", skillPart = 1 })
#baseMod skill("radius", 28, { type = "SkillPart", skillPart = 2 })
#mods

#skill VaalEarthquake
#flags attack melee area duration
	parts = {
		{
			name = "Initial impact",
		},
		{
			name = "Aftershock",
		},
	},
	statMap = {
		["quake_slam_fully_charged_explosion_damage_+%_final"] = {
			mod("Damage", "MORE", nil, 0, bit.bor(KeywordFlag.Hit, KeywordFlag.Ailment), { type = "SkillPart", skillPart = 2 }),
		},
	},
#baseMod skill("showAverage", true, { type = "SkillPart", skillPart = 2 })
#baseMod skill("radius", 18, { type = "SkillPart", skillPart = 1 })
#baseMod skill("radius", 28, { type = "SkillPart", skillPart = 2 })
#mods

#skill SpikeSlam
#flags attack melee area duration
	parts = {
		{
			name = "Initial impact",
		},
		{
			name = "Spike",
		},
	},
	statMap = {
		["spike_slam_explosion_damage_+%_final"] = {
			mod("Damage", "MORE", nil, 0, 0, { type = "SkillPart", skillPart = 2 }),
		},
		["active_skill_area_of_effect_+%_final"] = {
			mod("AreaOfEffect", "MORE", nil),
		},
		["spike_slam_fissure_length_+%"] = {
			mod("AreaOfEffect", "INC", nil, 0, 0, { type = "SkillPart", skillPart = 1 })
		},
		["spike_slam_fissure_damage_+%_final"] = {
			mod("Damage", "MORE", nil, 0, 0, { type = "SkillPart", skillPart = 1 }),
		},
		["spike_slam_spike_damage_+%_final"] = {
			mod("Damage", "MORE", nil, 0, 0, { type = "SkillPart", skillPart = 2 }),
		}
	},
#baseMod skill("radius", 18, { type = "SkillPart", skillPart = 1 })
#mods

#skill EnduringCry
#flags warcry area duration
	statMap = {
		["regenerate_x_life_over_1_second_on_skill_use_or_trigger"] = {
			mod("EnduringCryLifeRegen", "BASE", nil),
		},
		["resist_all_elements_%_per_endurance_charge"] = {
			mod("EnduringCryElementalResist", "BASE", nil),
		},
		["physical_damage_reduction_%_per_endurance_charge"] = {
			mod("EnduringCryPhysicalDamageReduction", "BASE", nil),
		},
	},
#baseMod skill("radius", 60)
#mods

#skill Exsanguinate
#flags spell duration
#baseMod skill("debuff", true)
#baseMod mod("Multiplier:ExsanguinateMaxStages", "BASE", 3)
#baseMod mod("PhysicalDamage", "MORE", 100, 0, KeywordFlag.PhysicalDot, { type = "Multiplier", var = "ExsanguinateStageAfterFirst"})
#mods

#skill FlameLink
#flags spell duration
#mods

#skill BloodSandArmour
#flags spell area aura
	statMap = {
		["support_maimed_enemies_physical_damage_taken_+%"] = {
			mod("PhysicalDamageTaken", "INC", nil, 0, 0, { type = "GlobalEffect", effectType = "AuraDebuff", effectName = "Maim", effectCond = "BloodStance" }, { type = "Condition", var = "Maimed" }),
		},
		["evasion_and_physical_damage_reduction_rating_+%"] = {
			mod("ArmourAndEvasion", "INC", nil, 0, 0, { type = "GlobalEffect", effectType = "Buff" }),
		},
		["damage_+%_if_changed_stances_recently"] = {
			mod("Damage", "INC", nil, 0, 0, { type = "GlobalEffect", effectType = "Buff"}, { type = "Condition", var = "ChangedStanceRecently" })
		},
	},
#baseMod skill("radius", 28)
#baseMod mod("Condition:Maimed", "FLAG", true, 0, 0, { type = "GlobalEffect", effectType = "AuraDebuff", effectName = "Flesh", effectCond = "BloodStance" })
#baseMod mod("Condition:Blinded", "FLAG", true, 0, 0, { type = "GlobalEffect", effectType = "AuraDebuff", effectName = "Stone", effectCond = "SandStance" })
#mods

#skill FrozenLegion
#flags spell
	statMap = {
		["frozen_legion_%_chance_to_summon_additional_statue"] = {
			mod("FrozenLegionExtraStatueChance", "BASE", nil)
		}
	},
#mods

#skill FrozenSweep
#flags attack area melee
	parts = {
		{
			name = "1 charge",
		},
		{
			name = "Wait for max charges",
		},
	},
	preDamageFunc = function(activeSkill, output, breakdown)
		local t_insert = table.insert
		local s_format = string.format
		local parentSkill
		local m_ceil = math.ceil
		local m_max = math.max
		activeSkill.skillData.showAverage = false
		activeSkill.skillFlags.showAverage = false
		activeSkill.skillFlags.notAverage = true	
		
		for _, skill in ipairs(activeSkill.actor.activeSkillList) do
			if skill.activeEffect.grantedEffect.name == "Frozen Legion" and activeSkill.actor.mainSkill.socketGroup.slot == activeSkill.socketGroup.slot then
				parentSkill = skill
				break
			end
		end

		if parentSkill.skillModList:Flag(parentSkill.skillCfg, "DisableSkill") and not parentSkill.skillModList:Flag(parentSkill.skillCfg, "EnableSkill") then
			return
		end

		activeSkill.skillData.cooldown = parentSkill.skillData.cooldown
		local cooldownOverride = parentSkill.skillModList:Override(parentSkill.skillCfg, "CooldownRecovery")
		local cooldown = cooldownOverride or (parentSkill.skillData.cooldown + parentSkill.skillModList:Sum("BASE", parentSkill.skillCfg, "CooldownRecovery")) / m_max(0, calcLib.mod(parentSkill.skillModList, parentSkill.skillCfg, "CooldownRecovery"))
		output.Cooldown = m_ceil(cooldown * data.misc.ServerTickRate) / data.misc.ServerTickRate
		activeSkill.skillData.hitTimeOverride = output.Cooldown

		local extraStatueChance = parentSkill.skillModList:Sum("BASE", parentSkill.skillCfg, "FrozenLegionExtraStatueChance") or 0
		local maxStatues = parentSkill.skillData.storedUses + parentSkill.skillModList:Sum("BASE", parentSkill.skillCfg, "AdditionalCooldownUses")
		
		local statuesWaitedFor
		local dpsMultiplier = extraStatueChance

		if activeSkill.skillPart == 1 then
			statuesWaitedFor = 1
		elseif activeSkill.skillPart == 2 then
			statuesWaitedFor = maxStatues
		end
		activeSkill.skillData.averageBurstHits = statuesWaitedFor + extraStatueChance / 100
		dpsMultiplier = 1 + extraStatueChance / statuesWaitedFor / 100
		if breakdown then
			breakdown.SkillDPSMultiplier = {}
			t_insert(breakdown.SkillDPSMultiplier, "DPS multiplier")
			t_insert(breakdown.SkillDPSMultiplier, "^8= extra statue chance / statues waited for")
			t_insert(breakdown.SkillDPSMultiplier, s_format("^8= ^7%d%%^8 / ^7%.2f", extraStatueChance, statuesWaitedFor))
			t_insert(breakdown.SkillDPSMultiplier, s_format("^8= ^7%.3f", dpsMultiplier))
		end
		if dpsMultiplier ~= 1 then
			activeSkill.skillData.dpsMultiplier = (activeSkill.skillData.dpsMultiplier or 1) * dpsMultiplier
			output.SkillDPSMultiplier = (output.SkillDPSMultiplier or 1) * dpsMultiplier
		end
	end,
#baseMod skill("radius", 25)
#mods

#skill GeneralsCry
#flags warcry area duration
	statMap = {
		["spiritual_cry_doubles_summoned_per_5_MP"] = {
		},
		["maximum_number_of_spiritual_cry_warriors"] = {
			mod("GeneralsCryDoubleMaxCount", "BASE", nil),
		},
	},
#baseMod skill("radius", 60)
#mods

#skill GeneralsCrySupport
	statMap = {
		["support_spiritual_cry_damage_+%_final"] = {
			mod("Damage", "MORE", nil),
		},
		["number_of_warcries_exerting_this_action"] = {
		},
	},
#mods

#skill GlacialHammer
#flags attack melee
	statMap = {
		["glacial_hammer_third_hit_freeze_as_though_dealt_damage_+%"] = {
			mod("FreezeAsThoughDealing", "MORE", nil)
		},
	},
#mods

#skill VaalGlacialHammer
#flags attack melee area duration
#baseMod skill("radius", 20)
#mods

#skill GroundSlam
#flags attack melee area
	statMap = {
		["groundslam_damage_to_close_targets_+%_final"] = {
			mod("Damage", "MORE", nil, ModFlag.Hit, 0, { type = "Condition", var = "AtCloseRange" })
		},
	},
#baseMod skill("radius", 35)
#mods

#skill VaalGroundSlam
#flags attack melee area
	statMap = {
		["groundslam_damage_to_close_targets_+%_final"] = {
			mod("Damage", "MORE", nil, ModFlag.Hit, 0, { type = "Condition", var = "AtCloseRange" })
		},
		["vaal_skill_exertable"] = {
		},
	},
#baseMod skill("radius", 39)
#mods

#skill HeavyStrike
#flags attack melee
	statMap = {
		["chance_to_deal_double_damage_%"] = {
			mod("DoubleDamageChance", "BASE", nil),
		},
	},
#mods

#skill HeraldOfAsh
#flags spell area
	preDamageFunc = function(activeSkill, output)
		activeSkill.skillData.FireDot = (activeSkill.skillData.hoaOverkill or 0) * (1 + activeSkill.skillData.hoaMoreBurn / 100) * activeSkill.skillData.hoaOverkillPercent
	end,
	statMap = {
		["herald_of_ash_fire_damage_+%"] = {
			mod("FireDamage", "INC", nil, 0, 0, { type = "GlobalEffect", effectType = "Buff" }),
		},
		["herald_of_ash_spell_fire_damage_+%_final"] = {
			mod("FireDamage", "MORE", nil, ModFlag.Spell, 0, { type = "GlobalEffect", effectType = "Buff" }),
		},
		["physical_damage_%_to_add_as_fire"] = {
			mod("PhysicalDamageGainAsFire", "BASE", nil, 0, 0, { type = "GlobalEffect", effectType = "Buff" })
		},
		["herald_of_ash_burning_damage_+%_final"] = {
			skill("hoaMoreBurn", nil),
		},
		["herald_of_ash_burning_%_overkill_damage_per_minute"] = {
			skill("hoaOverkillPercent", nil),
			div = 6000,
		},
	},
#baseMod skill("radius", 10)
#mods

#skill HeraldOfPurity
#flags spell minion duration
	minionList = {
		"AxisEliteSoldierHeraldOfLight",
	},
	statMap = {
		["base_number_of_champions_of_light_allowed"] = {
			mod("ActiveSentinelOfPurityLimit", "BASE", nil)
		},
		["herald_of_purity_physical_damage_+%_final"] = {
			mod("PhysicalDamage", "MORE", nil, 0, 0, { type = "GlobalEffect", effectType = "Buff" }),
		},
		["sentinel_minion_cooldown_speed_+%"] = {
			mod("MinionModifier", "LIST", { mod = mod("CooldownRecovery", "INC", nil, 0, 0) })
		}
	},
#mods

#skill FlameTotem
#flags spell totem projectile duration
#baseMod skill("radius", 16)
#mods

#skill IceCrash
#flags attack melee area
	parts = {
		{
			name = "First Hit",
		},
		{
			name = "Second Hit",
		},
		{
			name = "Third Hit",
		},
	},
	statMap = {
		["ice_crash_first_stage_damage_+%_final"] = {
			mod("Damage", "MORE", nil, 0, 0, { type = "SkillPart", skillPart = 1 }),
		},
		["ice_crash_second_hit_damage_+%_final"] = {
			mod("Damage", "MORE", nil, 0, 0, { type = "SkillPart", skillPart = 2 }),
		},
		["ice_crash_third_hit_damage_+%_final"] = {
			mod("Damage", "MORE", nil, 0, 0, { type = "SkillPart", skillPart = 3 }),
		},
	},
#baseMod skill("radius", 26)
#mods

#skill ImmortalCall
#flags spell duration
	statMap = {
		["mortal_call_elemental_damage_taken_+%_final"] = {
			mod("ElementalDamageTaken", "MORE", nil, 0, 0, { type = "GlobalEffect", effectType = "Guard" }),
		},
		["mortal_call_physical_damage_taken_+%_final"] = {
			mod("PhysicalDamageTaken", "MORE", nil, 0, 0, { type = "GlobalEffect", effectType = "Guard" }),
		},
		["mortal_call_physical_damage_taken_per_endurance_charge_consumed_final_permyriad"] = {
			mod("PhysicalDamageTaken", "MORE", nil, 0, 0, { type = "GlobalEffect", effectType = "Guard" }, { type = "Multiplier", var = "RemovableEnduranceCharge", limit = 5 }),
			div = 100,
		},
		["immortal_call_elemental_damage_taken_+%_final_per_endurance_charge_consumed_permyriad"] = {
			mod("ElementalDamageTaken", "MORE", nil, 0, 0, { type = "GlobalEffect", effectType = "Guard" }, { type = "Multiplier", var = "RemovableEnduranceCharge", limit = 5 }),
			div = 100,
		},
	},
#mods

#skill VaalImmortalCall
#flags spell duration
#baseMod flag("Condition:CannotDie", { type = "GlobalEffect", effectType = "Guard" })
#mods

#skill InfernalBlow
#flags attack melee duration
	statMap = {
		["infernal_blow_explosion_damage_%_of_total_per_stack"] = {
			mod("DebuffEffect", "BASE", nil)
		}
	},
	parts = {
		{
			name = "Melee Hit",
			area = false
		},
		{
			name = "Debuff Explosion - 1 Stack",
			area = true
		},
		{
			name = "Debuff Explosion - 6 Stacks",
			area = true
		},
	},
	preDamageFunc = function(activeSkill, output)
		local effect = activeSkill.skillModList:Sum("BASE", activeSkill.skillCfg, "DebuffEffect")
		if activeSkill.skillPart == 2 or activeSkill.skillPart == 3 then
			activeSkill.skillModList:NewMod("Damage", "MORE", effect, "Skill:InfernalBlow", 0, { type = "Multiplier", var = "DebuffStack", base = -100 + effect })
		end
		if activeSkill.skillPart == 3 then
			activeSkill.skillData.dpsMultiplier = 1 / 6
		end
	end,
#baseMod skill("radius", 15)
#baseMod skill("showAverage", true, { type = "SkillPart", skillPart = 2 })
#baseMod mod("Multiplier:DebuffStack", "BASE", 5, 0, 0, { type = "SkillPart", skillPart = 3 })
#mods

#skill IntimidatingCry
#flags warcry area duration
	statMap = {
		["skill_empowers_next_x_melee_attacks"] = {
			mod("IntimidatingExertedAttacks", "BASE", nil),
		},
		["intimidating_cry_enemy_phys_reduction_%_penalty_vs_hit_per_5_MP"] = {
			mod("IntimidatingPDRPer5MP", "BASE", nil),
		},
		["warcry_grant_overwhelm_%_to_exerted_attacks"] = {
			-- This is okay not indicating exert because it must be enabled by Intimidating Cry which would exert the attack
			mod("EnemyPhysicalDamageReduction", "BASE", nil, ModFlag.Attack, 0)
		},
		["intimidating_cry_empowerd_attacks_deal_double_damage_display"] = {
		},
	},
#baseMod skill("radius", 60)
#mods

#skill LeapSlam
#flags attack melee area
#baseMod skill("radius", 15)
#mods

#skill MoltenShell
#flags hit area duration
	preDamageFunc = function(activeSkill, output)
		local add = (activeSkill.skillData.MoltenShellDamageMitigated or 0) * activeSkill.skillData.moltenShellReflect / 100
		activeSkill.skillData.FireMin = add
		activeSkill.skillData.FireMax = add
	end,
	statMap = {
		["base_physical_damage_reduction_rating"] = {
			mod("Armour", "BASE", nil, 0, 0, { type = "GlobalEffect", effectType = "Guard" }),
		},
		["molten_shell_damage_absorbed_%"] = {
			mod("GuardAbsorbRate", "BASE", nil, 0, 0, { type = "GlobalEffect", effectType = "Guard", unscalable = true }),
		},
		["molten_shell_damage_absorb_limit_%_of_armour"] = {
			mod("GuardAbsorbLimit", "BASE", nil, 0, 0, { type = "PerStat", stat = "Armour", limitVar = "GuardAbsorbMax", limitTotal = true }, { type = "GlobalEffect", effectType = "Guard", unscalable = true }),
			div = 100,
		},
		["molten_shell_max_damage_absorbed"] = {
			mod("Multiplier:GuardAbsorbMax", "BASE", nil, 0, 0, { type = "GlobalEffect", effectType = "Guard", unscalable = true }),
		},
		["molten_shell_%_of_absorbed_damage_dealt_as_reflected_fire"] = {
			skill("moltenShellReflect", nil),
		},
		["molten_shell_explosion_damage_penetrates_%_fire_resistance"] = {
			mod("FirePenetration", "BASE", nil)
		}
	},
#baseMod skill("radius", 15)
#mods

#skill VaalMoltenShell
#flags hit area duration
	preDamageFunc = function(activeSkill, output)
		local add = (activeSkill.skillData.VaalMoltenShellDamageMitigated or 0) * activeSkill.skillData.moltenShellReflect / 100
		activeSkill.skillData.FireMin = add
		activeSkill.skillData.FireMax = add
	end,
	statMap = {
		["base_physical_damage_reduction_rating"] = {
			mod("Armour", "BASE", nil, 0, 0, { type = "GlobalEffect", effectType = "Guard" }),
		},
		["molten_shell_damage_absorbed_%"] = {
			mod("GuardAbsorbRate", "BASE", nil, 0, 0, { type = "GlobalEffect", effectType = "Guard", unscalable = true }),
		},
		["molten_shell_damage_absorb_limit_%_of_armour"] = {
			mod("GuardAbsorbLimit", "BASE", nil, 0, 0, { type = "PerStat", stat = "Armour", limitVar = "GuardAbsorbMax", limitTotal = true }, { type = "GlobalEffect", effectType = "Guard", unscalable = true }),
			div = 100,
		},
		["molten_shell_max_damage_absorbed"] = {
			mod("Multiplier:GuardAbsorbMax", "BASE", nil, 0, 0, { type = "GlobalEffect", effectType = "Guard", unscalable = true }),
		},
		["molten_shell_%_of_absorbed_damage_dealt_as_reflected_fire"] = {
			skill("moltenShellReflect", nil),
		},
	},
#mods

#skill MoltenStrike
#flags attack melee projectile area
	parts = {
		{
			name = "Melee Hit",
			melee = true,
			projectile = false,
			area = false,
		},
		{
			name = "Magma Balls",
			melee = false,
			projectile = true,
			area = true,
		},
	},
	statMap = {
		["active_skill_hit_ailment_damage_with_projectile_+%_final"] = {
			mod("Damage", "MORE", nil, bit.band(ModFlag.Hit, ModFlag.Ailment), 0, { type = "SkillPart", skillPart = 2 })
		},
	},
#baseMod skill("projectileSpeedAppliesToMSAreaOfEffect", true)
#baseMod skill("radius", 9, { type = "SkillPart", skillPart = 2 })
#baseMod skill("radiusLabel", "Ball area:", { type = "SkillPart", skillPart = 2 })
#baseMod skill("radiusSecondary", 2, { type = "SkillPart", skillPart = 2 })
#baseMod skill("radiusSecondaryLabel", "Chain Minimum Distance:", { type = "SkillPart", skillPart = 2 })
#baseMod skill("radiusTertiary", 25, { type = "SkillPart", skillPart = 2 })
#baseMod skill("radiusTertiaryLabel", "Chain Maximum Distance:", { type = "SkillPart", skillPart = 2 })
#mods

#skill VaalMoltenStrike
#flags attack melee projectile area chaining
	parts = {
		{
			name = "Melee Hit",
			melee = true,
			projectile = false,
			area = false,
			chaining = false,
		},
		{
			name = "Magma Balls",
			melee = false,
			projectile = true,
			area = true,
			chaining = true,
		},
	},
#baseMod skill("projectileSpeedAppliesToMSAreaOfEffect", true)
#baseMod skill("radius", 9, { type = "SkillPart", skillPart = 2 })
#baseMod skill("radiusLabel", "Ball area:", { type = "SkillPart", skillPart = 2 })
#baseMod skill("radiusSecondary", 2, { type = "SkillPart", skillPart = 2 })
#baseMod skill("radiusSecondaryLabel", "Chain Minimum Distance:", { type = "SkillPart", skillPart = 2 })
#baseMod skill("radiusTertiary", 25, { type = "SkillPart", skillPart = 2 })
#baseMod skill("radiusTertiaryLabel", "Chain Maximum Distance:", { type = "SkillPart", skillPart = 2 })
#mods

#skill BloodSpears
#flags attack melee area
	preDamageFunc = function(activeSkill, output)
		activeSkill.skillData.dpsMultiplier = math.max(activeSkill.skillData.dpsMultiplier or 1, 1)
	end,
	statMap = {
		["blood_spears_base_number_of_spears"] = {
			mod("Multiplier:PerforateMaxSpikes", "BASE", nil),
		},
		["blood_spears_damage_+%_final_in_blood_stance"] = {
			mod("Damage", "MORE", nil, 0, 0, { type = "Condition", var = "BloodStance" }),
		},
		["blood_spears_additional_number_of_spears_if_changed_stance_recently"] = {
			mod("Multiplier:PerforateMaxSpikes", "BASE", nil, 0, 0, { type = "Condition", var = "ChangedStanceRecently" }),
		},
		["skill_area_of_effect_+%_final_in_sand_stance"] = {
			mod("AreaOfEffect", "MORE", nil, 0, 0, { type = "Condition", var = "SandStance" }),
		}
	},
#baseMod skill("dpsMultiplier", 1, { type = "Multiplier", var = "PerforateSpikeOverlap", limitVar = "PerforateMaxSpikes" }, { type = "Condition", var = "BloodStance" })
#baseMod skill("radius", 11, { type = "Condition", var = "SandStance" })
#baseMod skill("radius", 8, { type = "Condition", var = "BloodStance" })
#mods

#skill PetrifiedBlood
	statMap = {
		["skill_grants_life_cost_%_mana_cost_while_not_on_low_life"] = {
			mod("ManaCostAsLifeCost", "BASE", nil, 0, 0, { type = "GlobalEffect", effectType = "Buff", effectName = "Petrified Blood", unscalable = true }, { type="Condition", var="LowLife", neg = true }),
		},
		["petrified_blood_%_life_loss_below_half_from_hit_to_prevent"] = {
			mod("LifeLossBelowHalfPrevented", "BASE", nil, 0, 0, { type = "GlobalEffect", effectType = "Buff", effectName = "Petrified Blood" }),
		},
		["petrified_blood_%_prevented_life_loss_to_lose_over_time"] = {
			mod("LifeLossBelowHalfLost", "BASE", nil, 0, 0, { type = "GlobalEffect", effectType = "Buff", effectName = "Petrified Blood" }),
		},
	},
#mods

#skill PhysicalDamageAura
#flags spell aura area
	statMap = {
		["physical_damage_aura_nearby_enemies_physical_damage_taken_+%"] = {
			mod("PhysicalDamageTaken", "MORE", nil, 0, 0, { type = "GlobalEffect", effectType = "AuraDebuff", modCond = "PrideMinEffect" }),
		},
		["physical_damage_aura_nearby_enemies_physical_damage_taken_+%_max"] = {
			mod("PhysicalDamageTaken", "MORE", nil, 0, 0, { type = "GlobalEffect", effectType = "AuraDebuff", modCond = "PrideMaxEffect" }),
		},
		["receive_bleeding_chance_%_when_hit_by_attack"] = {
			mod("SelfBleedChance", "BASE", nil, 0, 0, { type = "GlobalEffect", effectType = "AuraDebuff" }),
		},
		["base_additional_physical_damage_reduction_%"] = {
			mod("PhysicalDamageReduction", "BASE", nil, 0, 0, { type = "GlobalEffect", effectType = "AuraDebuff" }),
		},
	},
#baseMod skill("radius", 40)
#mods

#skill ProtectiveLink
#flags spell duration
#mods

#skill Punishment
#flags spell curse area duration hex
	statMap = {
		["damage_taken_+%_on_low_life"] = {
			mod("DamageTaken", "INC", nil, 0, 0, { type = "GlobalEffect", effectType = "Curse" }, { type = "Condition", var = "LowLife"}),
		},
	},
#baseMod skill("debuff", true)
#baseMod skill("radius", 22)
#baseMod mod("DebilitateChance", "BASE", 100)
#mods

#skill FireResistAura
#flags spell aura area
	statMap = {
		["base_fire_damage_resistance_%"] = {
			mod("FireResist", "BASE", nil, 0, 0, { type = "GlobalEffect", effectType = "Aura" }),
		},
		["base_maximum_fire_damage_resistance_%"] = {
			mod("FireResistMax", "BASE", nil, 0, 0, { type = "GlobalEffect", effectType = "Aura" }),
		},
		["base_avoid_ignite_%"] = {
			mod("AvoidIgnite", "BASE", nil, 0, 0, { type = "GlobalEffect", effectType = "Aura" })
		},
		["base_reduce_enemy_fire_resistance_%"] = {
			mod("FirePenetration", "BASE", nil, 0, 0, { type = "GlobalEffect", effectType = "Aura" }),
		},
	},
#baseMod skill("radius", 40)
#mods

#skill FireImpurity
#flags spell aura area duration
	statMap = {
		["hits_ignore_my_fire_resistance"] = {
			flag("SelfIgnoreFireResistance", { type = "GlobalEffect", effectType = "AuraDebuff" })
		},
		["base_maximum_fire_damage_resistance_%"] = {
			mod("FireResistMax", "BASE", nil, 0, 0, { type = "GlobalEffect", effectType = "Aura" }),
		},
		["base_immune_to_ignite"] = {
			--Display only
		},
	},
#baseMod mod("AvoidIgnite", "BASE", 100, 0, 0, { type = "GlobalEffect", effectType = "Aura", unscalable = true })
#mods

#skill RageVortex
#flags attack melee area duration
	parts = {
		{
			name = "Melee",
		},
		{
			name = "Rage Storm",
		},
	},
	statMap = {
		["rage_slash_radius_+_per_amount_of_rage_sacrificed"] = {
			skill("radiusExtra", nil, { type = "Multiplier", var = "RageSacrificed", limitVar = "MaxRageVortexSacrifice" }),
			div = 2
		},
		["rage_slash_damage_+%_final_per_amount_of_rage_sacrificed"] = {
			mod("Damage", "MORE", nil, 0, 0, { type = "Multiplier", var = "RageSacrificed", limitVar = "MaxRageVortexSacrifice" }),
		},
		["rage_slash_vortex_attack_speed_+%_final"] = {
			mod("Speed", "MORE", nil, 0, 0, { type = "SkillPart", skillPart = 2 }),
		},
	},
#baseMod skill("radius", 18)
#mods

#skill RallyingCry
#flags warcry area duration
	statMap = {
		["rallying_cry_damage_+%_final_from_osm_per_nearby_ally"] = {
			mod("RallyingCryExertDamageBonus", "BASE", nil),
		},
		["skill_empowers_next_x_melee_attacks"] = {
			mod("RallyingExertedAttacks", "BASE", nil),
		},
		["rallying_cry_weapon_damage_%_for_allies_per_5_monster_power"] = {
			mod("RallyingCryAllyDamageBonusPer5Power", "BASE", nil),
			mod("Dummy", "DUMMY", 1, 0, 0, { type = "Multiplier", var = "NearbyAlly" }),
		},
		["rallying_cry_buff_effect_on_minions_+%_final"] = {
			mod("RallyingCryMinionDamageBonusMultiplier", "BASE", nil),
			div = 100
		},
	},
#baseMod skill("buffAllies", true)
#baseMod skill("buffNotPlayer", true)
#baseMod skill("radius", 60)
#mods

#skill Reckoning
#flags attack area melee
	statMap = {
		["debilitate_enemies_for_1_second_on_hit_%_chance"] = {
			mod("DebilitateChance", "BASE", nil)
		},
	},
#baseMod skill("radius", 35)
#mods

#skill RejuvenationTotem
#flags spell aura totem area duration
	statMap = {
		["base_life_regeneration_rate_per_minute"] = {
			mod("LifeRegen", "BASE", nil, 0, 0, { type = "GlobalEffect", effectType = "Aura" }),
			div = 60,
		},
	},
#baseMod skill("radius", 10)
#mods

#skill SearingBond
#flags spell totem duration
#mods

#skill SeismicCry
#flags warcry area duration
	statMap = {
		["skill_empowers_next_x_melee_attacks"] = {
			mod("SeismicExertedAttacks", "BASE", nil),
		},
		["seismic_cry_slam_skill_area_+%_increase_per_repeat"] = {
			mod("SeismicAoEMultiplier", "BASE", nil),
		},
		["seismic_cry_base_slam_skill_area_+%"] = {
		},
		["seismic_cry_+%_enemy_stun_threshold_per_5_MP"] = {
			mod("SeismicStunThresholdPer5MP", "BASE", nil),
		},
		["warcry_grant_knockback_%_to_exerted_attacks"] = {
			-- Not limited to exerted but should be okay because the cry will flag them as exerted
			mod("EnemyKnockbackChance", "BASE", nil),
		},
	},
#baseMod skill("radius", 60)
#mods

#skill NewShieldCharge
#flags attack melee area shieldAttack
#baseMod skill("radius", 28)
#baseMod skill("radiusLabel", "End Cone area:")
#baseMod skill("radiusSecondary", 16)
#baseMod skill("radiusSecondaryLabel", "End Circle area:")
#baseMod skill("radiusTertiary", 8)
#baseMod skill("radiusTertiaryLabel", "Charging area:")
#mods

#skill ShockwaveTotem
#flags spell totem area duration
#baseMod skill("radius", 24)
#mods

#skill Smite
#flags attack melee duration area
	parts = {
		{
			name = "Melee Hit",
			area = false,
		},
		{
			name = "Area Hit",
			area = true,
			melee = false,
		},
	},
	statMap = {
		["base_chance_to_shock_%_from_skill"] = {
			mod("EnemyShockChance", "BASE", nil, 0, 0, { type = "GlobalEffect", effectType = "Aura" }, { type = "Condition", neg = true, var = "AffectedByVaalSmite" }),
		},
		["minimum_added_lightning_damage_from_skill"] = {
			mod("LightningMin", "BASE", nil, 0, 0, { type = "GlobalEffect", effectType = "Aura" }, { type = "Condition", neg = true, var = "AffectedByVaalSmite" }),
		},
		["maximum_added_lightning_damage_from_skill"] = {
			mod("LightningMax", "BASE", nil, 0, 0, { type = "GlobalEffect", effectType = "Aura" }, { type = "Condition", neg = true, var = "AffectedByVaalSmite" }),
		},
		["skill_buff_grants_attack_and_cast_speed_+%"] = {
			mod("Speed", "INC", nil, 0, 0, { type = "GlobalEffect", effectType = "Aura" }, { type = "Condition", neg = true, var = "AffectedByVaalSmite" })
		},
	},
#baseMod skill("radius", 15)
#mods

#skill VaalSmite
#flags attack melee duration area
	parts = {
		{
			name = "Melee Hit",
			area = false,
		},
		{
			name = "Area Hit",
			area = true,
			melee = false,
		},
	},
	statMap = {
		["base_chance_to_shock_%_from_skill"] = {
			mod("EnemyShockChance", "BASE", nil, 0, 0, { type = "GlobalEffect", effectType = "Aura" }),
		},
		["minimum_added_lightning_damage_from_skill"] = {
			mod("LightningMin", "BASE", nil, 0, 0, { type = "GlobalEffect", effectType = "Aura" }),
		},
		["maximum_added_lightning_damage_from_skill"] = {
			mod("LightningMax", "BASE", nil, 0, 0, { type = "GlobalEffect", effectType = "Aura" }),
		},
	},
#baseMod skill("radius", 15)
#mods

#skill StaticStrike
#flags attack melee duration
	parts = {
		{
			name = "Melee hit",
			chaining = false,
		},
		{
			name = "Beams",
			chaining = true,
		}
	},
	statMap = {
		["static_strike_beam_damage_+%_final"] = {
			mod("Damage", "MORE", nil, 0, 0, { type = "SkillPart", skillPart = 2}),
		},
		["static_strike_base_zap_frequency_ms"] = {
			skill("repeatFrequency", nil),
			div = 1000,
		},
		["static_strike_zap_speed_+%"] = {
			skill("repeatFrequencyIncrease", nil),
			div = 100
		},
	},
preDamageFunc = function(activeSkill, output)
	if activeSkill.skillPart == 2 then
		activeSkill.skillData.hitTimeOverride = activeSkill.skillData.repeatFrequency / ((activeSkill.skillData.repeatFrequencyIncrease or 0) + 1)
	end
end,
#baseMod skill("radius", 20)
#mods

#skill QuickGuard
#flags spell duration
	statMap = {
		["resist_all_%"] = {
			mod("ElementalResist", "BASE", nil, 0, 0, { type = "GlobalEffect", effectType = "Guard" }),
			mod("ChaosResist", "BASE", nil, 0, 0, { type = "GlobalEffect", effectType = "Guard" }),
		},
		["quick_guard_damage_absorbed_%"] = {
			mod("GuardAbsorbRate", "BASE", nil, 0, 0, { type = "GlobalEffect", effectType = "Guard", unscalable = true }),
		},
		["quick_guard_damage_absorb_limit"] = {
			mod("GuardAbsorbLimit", "BASE", nil, 0, 0, { type = "GlobalEffect", effectType = "Guard", unscalable = true }),
		},
		["steelskin_damage_limit_+%"] = {
			mod("GuardAbsorbLimit", "INC", nil, 0, 0, { type = "GlobalEffect", effectType = "Guard", unscalable = true }),
		},
	},
#baseMod mod("AvoidBleed", "BASE", 100, 0, 0, { type = "GlobalEffect", effectType = "Guard" })
#mods

#skill Bloodreap
#flags spell area duration
	statMap = {
		["blood_scythe_damage_+%_final_per_charge"] = {
			mod("Damage", "MORE", nil, 0, 0, { type = "Multiplier", var = "BloodCharge" }),
		},
		["blood_scythe_cost_+%_final_per_charge"] = {
			mod("LifeCost", "MORE", nil, 0, 0, { type = "Multiplier", var = "BloodCharge" }),
		},
	},
#baseMod skill("radius", 25)
#baseMod skill("debuff", true)
#mods

#skill ShieldCrush
#flags attack melee area shieldAttack
	parts = {
		{
			name = "1 Wave",
		},
		{
			name = "2 Overlapping Waves",
		},
	},
#baseMod skill("radius", 29)
#baseMod skill("dpsMultiplier", 2, { type = "SkillPart", skillPart = 2 })
#mods

#skill SummonFireGolem
#flags spell minion golem
	minionList = {
		"SummonedFlameGolem",
	},
	statMap = {
		["fire_golem_grants_damage_+%"] = {
			mod("Damage", "INC", nil, 0, 0, { type = "GlobalEffect", effectType = "Buff" }),
		},
	},
#baseMod skill("allowTotemBuff", true)
#baseMod flag("Condition:HaveFireGolem", { type = "GlobalEffect", effectType = "Buff" })
#mods

#skill SummonRockGolem
#flags spell minion golem
	minionList = {
		"SummonedStoneGolem",
	},
	statMap = {
		["stone_golem_grants_base_life_regeneration_rate_per_minute"] = {
			mod("LifeRegen", "BASE", nil, 0, 0, { type = "GlobalEffect", effectType = "Buff" }),
			div = 60,
		},
	},
#baseMod skill("allowTotemBuff", true)
#baseMod flag("Condition:HavePhysicalGolem", { type = "GlobalEffect", effectType = "Buff" })
#mods

#skill NewSunder
#flags attack melee area
	parts = {
		{
			name = "First Wave Area",
		},
		{
			name = "Final Wave Area",
		},
		{
			name = "Shockwaves",
		},
	},
	statMap = {
		["shockwave_slam_explosion_damage_+%_final"] = {
			mod("Damage", "MORE", nil, 0, 0, { type = "SkillPart", skillPart = 3 }),
		},
		["active_skill_area_of_effect_+%_final"] = {
			mod("AreaOfEffect", "MORE", nil),
		},
		["sunder_wave_radius_+_per_step"] = {
			skill("radiusExtra", nil, { type = "Multiplier", var = "SunderWaveArea" }),
		},
		["sunder_shockwave_area_of_effect_+%"] = {
			mod("AreaOfEffect", "INC", nil, 0, 0, { type = "SkillPart", skillPart = 3 }),
		},
		["sunder_wave_area_of_effect_+%"] = {
			mod("AreaOfEffect", "INC", nil, 0, 0, { type = "SkillPart", skillPartList = {1, 2} }),
		},
	},
#baseMod skill("radius", 12)
#baseMod mod("Multiplier:SunderWaveArea", "BASE", 4, 0, 0, { type = "SkillPart", skillPart = 2 })
#mods

#skill Sweep
#flags attack melee area
#baseMod skill("radius", 24)
#mods

#skill EnduranceChargeSlam
#flags attack melee area
	statMap = {
		["active_skill_area_of_effect_+%_final_per_endurance_charge"] = {
			mod("AreaOfEffect", "MORE", nil, 0, 0, { type = "Multiplier", var = "EnduranceCharge" }),
		},
		["base_life_leech_from_fire_damage_permyriad"] = {
			mod("FireDamageLifeLeech", "BASE", nil),
			div = 100,
		}
	},
#baseMod skill("radius", 15)
#baseMod skill("radiusLabel", "Fissure Length:")
#baseMod skill("radiusSecondary", 7)
#baseMod skill("radiusSecondaryLabel", "Fissure Width:")
#mods

#skill Vengeance
#flags attack melee area
	statMap = {
		["gain_rage_on_hit_%_chance"] = {
			flag("Condition:CanGainRage", { type = "GlobalEffect", effectType = "Buff" }),
		}
	},
#mods

#skill VigilantStrike
#flags attack melee
#mods

#skill Vitality
#flags spell aura area
	statMap = {
		["base_life_regeneration_rate_per_minute"] = {
			mod("LifeRegen", "BASE", nil, 0, 0, { type = "GlobalEffect", effectType = "Aura" }),
			div = 60,
		},
		["damage_+%_when_on_full_life"] = {
			mod("Damage", "INC", nil, 0, 0, { type = "GlobalEffect", effectType = "Aura" }, { type = "Condition", var = "FullLife" })
		},
		["life_leech_from_physical_attack_damage_permyriad"] = {
			mod("PhysicalDamageLifeLeech", "BASE", nil, ModFlag.Attack, 0, { type = "GlobalEffect", effectType = "Aura" }),
			div = 100,
		},
	},
#baseMod skill("radius", 40)
#mods

#skill VolcanicFissure
#flags melee attack projectile area slam
	parts = {
		{
			name = "Ground Fissure",
			melee = true,
			projectile = false,
		},
		{
			name = "Magma Balls",
			melee = false,
			projectile = true,
		},
	},
	statMap = {
		["active_skill_hit_ailment_damage_with_projectile_+%_final"] = {
			mod("Damage", "MORE", nil, bit.band(ModFlag.Hit, ModFlag.Ailment), 0, { type = "SkillPart", skillPart = 2 })
		},
	},
#mods

#skill VaalVolcanicFissure
#flags melee attack projectile area slam
	parts = {
		{
			name = "Ground Fissure",
			melee = true,
			projectile = false,
		},
		{
			name = "Magma Balls",
			melee = false,
			projectile = true,
		},
	},
#mods

#skill Vulnerability
#flags spell curse area duration hex
	statMap = {
		["receive_bleeding_chance_%_when_hit_by_attack"] = {
			mod("SelfBleedChance", "BASE", nil, 0, 0, { type = "GlobalEffect", effectType = "Curse" }),
		},
		["physical_damage_taken_+%"] = {
			mod("PhysicalDamageTaken", "INC", nil, 0, 0, { type = "GlobalEffect", effectType = "Curse" }),
		},
		["self_bleed_duration_+%"] = {
			mod("SelfBleedDuration", "INC", nil, 0, 0, { type = "GlobalEffect", effectType = "Curse" }),
		},
	},
#baseMod skill("debuff", true)
#baseMod skill("radius", 22)
#mods

#skill WarlordsMark
#flags spell curse duration mark
	statMap = {
		["life_leech_on_any_damage_when_hit_by_attack_permyriad"] = {
			mod("SelfDamageLifeLeech", "BASE", nil, ModFlag.Attack, 0, { type = "GlobalEffect", effectType = "Curse" }),
		},
		["mana_leech_on_any_damage_when_hit_by_attack_permyriad"] = {
			mod("SelfDamageManaLeech", "BASE", nil, ModFlag.Attack, 0, { type = "GlobalEffect", effectType = "Curse" }),
		},
		["base_damage_taken_+%"] = {
			mod("DamageTaken", "INC", nil, 0, 0, { type = "GlobalEffect", effectType = "Curse" }),
		},
		["enemy_rage_regeneration_on_stun"] = {
			flag("Condition:CanGainRage", { type = "GlobalEffect", effectType = "Buff" } ),
		},
	},
#baseMod skill("debuff", true)
#mods

#skill BloodstainedBanner
#flags spell
	statMap = {
		["accuracy_rating_+%"] = {
			mod("Accuracy", "INC", nil, 0, 0, { type = "GlobalEffect", effectType = "Aura" })
		},
		["physical_damage_taken_+%"] = {
			mod("PhysicalDamageTaken", "INC", nil, 0, 0, { type = "GlobalEffect", effectType = "AuraDebuff" })
		},
	},
#baseMod skill("radius", 46)
#baseMod skill("manaReservationPercent", 0, { type = "Condition", var = "BannerPlanted" })
#baseMod flag("Condition:AffectedByPlacedBanner", { type = "Condition", var = "BannerPlanted" }, { type = "GlobalEffect", effectType = "Buff" })
#mods