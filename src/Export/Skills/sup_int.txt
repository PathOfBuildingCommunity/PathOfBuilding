-- Path of Building
--
-- Intelligence support gems
-- Skill data (c) Grinding Gear Games
--
local skills, mod, flag, skill = ...

#skill SupportAddedChaosDamage
#mods

#skill SupportAddedChaosDamagePlus
#mods

#skill SupportAddedLightningDamage
#mods

#skill SupportAddedLightningDamagePlus
#mods

#skill SupportArcaneSurge
	statMap = {
		["support_arcane_surge_mana_regeneration_rate_+%"] = {
			mod("ArcaneSurgeManaRegen", "MAX", nil, 0, 0, { type = "GlobalEffect", effectType = "Buff", effectName = "Arcane Surge", unscalable = true }),
		},
		["support_arcane_surge_cast_speed_+%"] = {
			mod("ArcaneSurgeCastSpeed", "MAX", nil, 0, 0, { type = "GlobalEffect", effectType = "Buff", effectName = "Arcane Surge", unscalable = true }),
		},
		["support_arcane_surge_spell_damage_+%_final_while_you_have_arcane_surge"] = {
			mod("Damage", "MORE", nil, ModFlag.Spell, 0, { type = "Condition", var = "AffectedByArcaneSurge" }),
		},
	},
#mods

#skill SupportArchmage
	statMap = {
		["manaweave_cost_equals_%_unreserved_mana"] = {
			mod("ManaCostBase", "BASE", nil, 0, 0, { type = "PercentStat", stat = "ManaUnreserved" , percent = 1 }),
		},
		["archmage_gain_lightning_damage_%_of_max_unreserved_mana"] = {
			mod("LightningMin", "BASE", nil, 0, 0, { type = "PercentStat", stat = "ManaUnreserved" , percent = 1 }),
			mod("LightningMax", "BASE", nil, 0, 0, { type = "PercentStat", stat = "ManaUnreserved" , percent = 1 }),
		},
	},
#mods

#skill Automation
	statMap = {
		["automation_behaviour"] ={
			-- Display only
		}
	},
#mods

#skill SupportAutomation
	statMap = {
	},
#mods

#skill SupportBlasphemy
	statMap = {
		["curse_apply_as_aura"] = {
		},
		["support_blasphemy_curse_effect_+%_final"] = {
			mod("CurseEffect", "MORE", nil),
		},
	},
#mods

#skill SupportBlasphemyPlus
	statMap = {
		["curse_apply_as_aura"] = {
		},
		["support_blasphemy_curse_effect_+%_final"] = {
			mod("CurseEffect", "MORE", nil),
		},
	},
#mods

#skill SupportBonechill
#baseMod skill("supportBonechill", true)
	statMap = {
		["support_bonechill_cold_damage_+%_final"] = {
			mod("ColdDamage", "MORE", nil),
		},
		["support_chills_also_grant_cold_damage_taken_+%_equal_to_slow_amount"] = {
		},
		["support_chilling_areas_also_grant_cold_damage_taken_+%_equal_to_slow_amount"] = {
		},
	},
#mods

#skill SupportCastOnStunned
#mods

#skill SupportCastWhileChannelling
	statMap = {
		["cast_while_channelling_time_ms"] = {
			skill("triggerTime", nil, { type = "SkillType", skillType = SkillType.Channel } ),
			div = 1000,
		},
		["support_cast_while_channelling_triggered_skill_damage_+%_final"] = {
		},
	},
#mods

#skill SupportCastWhileChannellingTriggered
	statMap = {
		["support_cast_while_channelling_triggered_skill_damage_+%_final"] = {
			mod("TriggeredDamage", "MORE", nil, 0, 0, { type = "SkillType", skillType = SkillType.Triggered }),
		},
	},
#mods

#skill SupportCastWhileChannellingPlus
	statMap = {
		["cast_while_channelling_time_ms"] = {
			skill("triggerTime", nil, { type = "SkillType", skillType = SkillType.Channel } ),
			div = 1000,
		},
		["support_cast_while_channelling_triggered_skill_damage_+%_final"] = {
		},
	},
#mods

#skill SupportCastWhileChannellingTriggeredPlus
	statMap = {
		["support_cast_while_channelling_triggered_skill_damage_+%_final"] = {
			mod("TriggeredDamage", "MORE", nil, 0, 0, { type = "SkillType", skillType = SkillType.Triggered }),
		},
	},
#mods

#skill SupportChanceToIgnite
	statMap = {
		["support_chance_to_ignite_fire_damage_+%_final"] = {
			mod("FireDamage", "MORE", nil),
		},
		["ignites_apply_fire_resistance_+"] = {
			mod("CombustionFireResist", "BASE", nil),
		},
	},
#mods

#skill SupportChargedMines
#mods

#skill SupportConcentratedEffect
	statMap = {
		["support_concentrated_effect_skill_area_of_effect_+%_final"] = {
			mod("AreaOfEffect", "MORE", nil),
		},
		["support_area_concentrate_area_damage_+%_final"] = {
			mod("Damage", "MORE", nil, ModFlag.Area),
		},
	},
#mods

#skill SupportControlledDestruction
	statMap = {
		["support_controlled_destruction_spell_damage_+%_final"] = {
			mod("Damage", "MORE", nil, ModFlag.Spell),
		},
		["support_controlled_destruction_critical_strike_chance_+%_final"] = {
			mod("CritChance", "MORE", nil),
		},
	},
#mods

#skill SupportControlledDestructionPlus
	statMap = {
		["support_controlled_destruction_spell_damage_+%_final"] = {
			mod("Damage", "MORE", nil, ModFlag.Spell),
		},
		["support_controlled_destruction_critical_strike_chance_+%_final"] = {
			mod("CritChance", "MORE", nil),
		},
	},
#mods

#skill SupportCursedGround
#mods

#skill SupportCurseOnHit
	statMap = {
		["apply_linked_curses_on_hit_%"] = {
			--Display only. Handled by SupportCurseOnHitCurse
		},
		["support_hextouch_curse_effect_+%_final"] = {
		},
	},
#mods

#skill SupportCurseOnHitCurse
	statMap = {
		["curse_triggered_by_hextouch"] = {
			skill("triggeredByCurseOnHit", true),
			flag("HasNoCost")
		},
		["support_hextouch_curse_effect_+%_final"] = {
			mod("CurseEffect", "MORE", nil),
		},
	},
#mods

#skill SupportCurseOnHitPlus
	statMap = {
		["apply_linked_curses_on_hit_%"] = {
			--Display only. Handled by SupportCurseOnHitCursePlus
		},
		["support_hextouch_curse_effect_+%_final"] = {
		},
	},
#mods

#skill SupportCurseOnHitCursePlus
	statMap = {
		["curse_triggered_by_hextouch"] = {
			skill("triggeredByCurseOnHit", true),
			flag("HasNoCost")
		},
		["support_hextouch_curse_effect_+%_final"] = {
			mod("CurseEffect", "MORE", nil),
		},
	},
#mods

#skill SupportMinionFocusFire
	statMap = {
		["deathmark_minion_damage_+%_final"] = {
			mod("MinionModifier", "LIST", { mod = mod("Damage", "MORE", nil) }),
		},
		["support_minion_focus_fire_damage_+%_final_vs_focussed_target"] = {
			mod("MinionModifier", "LIST", { mod = mod("Damage", "MORE", nil) }, 0, 0, { type = "Condition", var = "EnemyHasDeathmark" }),
		},
	},
#mods

#skill MinionFocusFire
#mods

#skill SupportDecay
#mods

#skill SupportDevour
	statMap = {
		["killing_blow_consumes_corpse_restore_x_life"] = {
			mod("LifeOnKill", "BASE", nil),
		},
		["killing_blow_consumes_corpse_restore_x_mana"] = {
			mod("ManaOnKill", "BASE", nil),
		},
	},
#mods

#skill SupportEfficacy
	statMap = {
		["support_efficacy_spell_damage_+%_final"] = {
			mod("Damage", "MORE", nil, ModFlag.Spell),
		},
		["support_efficacy_damage_over_time_+%_final"] = {
			mod("Damage", "MORE", nil, ModFlag.Dot),
		},
	},
#mods

#skill SupportElementalFocus
	statMap = {
		["support_gem_elemental_damage_+%_final"] = {
			mod("ElementalDamage", "MORE", nil),
		},
	},
#mods

#skill SupportElementalFocusPlus
	statMap = {
		["support_gem_elemental_damage_+%_final"] = {
			mod("ElementalDamage", "MORE", nil),
		},
	},
#mods

#skill SupportElementalProliferation
#mods

#skill SupportEnergyShieldLeech
	statMap = {
		["support_energy_shield_leech_damage_+%_on_full_energy_shield_final"] = {
			mod("Damage", "MORE", nil, 0, 0, { type = "Condition", var = "FullEnergyShield" }),
		},
		["support_energy_shield_leech_damage_+%_while_leeching_energy_shield_final"] = {
			mod("Damage", "MORE", nil, 0, 0, { type = "Condition", var = "LeechingEnergyShield" }),
		},
	},
#mods

#skill SupportAdditionalXP
#mods

#skill SupportAdditionalXPPlus
#mods

#skill SupportFasterCast
#mods

#skill SupportMinionOffensiveStance
	statMap = {
		["support_minion_offensive_stance_minion_damage_+%_final_while_you_have_puppet_master"] = {
			mod("MinionModifier", "LIST", { mod = mod("Damage", "MORE", nil) }, 0, 0, { type = "Condition", var = "FeedingFrenzyActive" }),
		},
	},
#mods

#skill SupportFreshMeat
	statMap = {
		["support_recent_minions_additional_critical_strike_chance_from_wakened_fury"] = {
			mod("MinionModifier", "LIST", { mod = mod("CritChance", "BASE", nil) }, 0, 0, { type = "Condition", var = "FreshMeatActive" }),
			div = 100,
		},
		["support_recent_minions_additional_critical_strike_multiplier_from_wakened_fury"] = {
			mod("MinionModifier", "LIST", { mod = mod("CritMultiplier", "BASE", nil) }, 0, 0, { type = "Condition", var = "FreshMeatActive" }),
		},
	},
#baseMod mod("MinionModifier", "LIST", { mod = mod("Condition:Adrenaline", "FLAG", true) }, 0, 0, { type = "Condition", var = "FreshMeatActive" })
#mods

#skill SupportFrigidBond
	statMap = {
		["support_damaging_links_base_duration_ms"] = {
			mod("SecondaryDuration", "BASE", nil),
			div = 1000,
		},
		["support_damaging_links_base_duration_is_gem"] = {
		},
	},
#mods

#skill SupportHexBloom
#mods

#skill SupportRemoteMine2
	addFlags = {
		mine = true,
	},
	statMap = {
		["support_remote_mine_2_damage_+%_final"] = {
			mod("Damage", "MORE", nil),
		},
		["support_remote_mine_2_chance_to_deal_double_damage_%_against_enemies_near_mines"] = {
			mod("SelfDoubleDamageChance", "BASE", nil, 0, 0, { type = "Limit", limit = 100 }, { type = "GlobalEffect", effectType = "AuraDebuff", effectName = "High-Impact Mine", effectStackVar = "ActiveMineCount" }),
		},
	},
#mods

#skill SupportIgniteProliferation
	statMap = {
		["support_ignite_prolif_ignite_damage_+%_final"] = {
			mod("Damage", "MORE", nil, 0, KeywordFlag.Ignite),
		},
	},
#mods

#skill SupportImmolation
#mods

#skill ViciousHexSupport
#flags spell area chaos hex
	statMap = {
		["trigger_vicious_hex_explosion_when_curse_ends"] = {
			-- Display only
		},
	},
#mods

#skill ViciousHexExplosion
#flags spell area
#baseMod skill("radius", 20)
#mods

#skill SupportIncreasedAreaOfEffect
#mods

#skill SupportIncreasedAreaOfEffectPlus
	statMap = {
		["inc_aoe_plus_more_area_damage_+%_final"] = {
			mod("Damage", "MORE", nil, ModFlag.Area),
		},
	},
#mods

#skill SupportIncreasedCriticalDamage
#mods

#skill SupportIncreasedCriticalStrikes
#mods

#skill SupportBurningMinions
	statMap = {
		["minion_fire_damage_%_of_maximum_life_taken_per_minute"] = {
			mod("MinionModifier", "LIST", { mod = mod("FireDegen", "BASE", nil, 0, 0, { type = "PerStat", stat = "Life" }, { type = "GlobalEffect", effectType = "Buff" }) }),
			div = 6000,
		},
		["support_minion_instability_minion_base_fire_area_damage_per_minute"] = {
			mod("MinionModifier", "LIST", { mod = mod("Multiplier:InfernalLegionBaseDamage", "BASE", nil) }),
			div = 60,
			mod("ExtraMinionSkill", "LIST", { skillId = "InfernalLegion" }),
		},
	},
#mods

#skill SupportStormBarrier
	statMap = {
		["support_storm_barrier_skill_type_damage_taken_when_hit_+%_final"] = {
			mod("PhysicalDamageTakenWhenHit", "MORE", nil, 0, 0, { type = "GlobalEffect", effectType = "Buff", effectName = "Infused Channelling", modCond = "PhysicalInfusion" }),
			mod("FireDamageTakenWhenHit", "MORE", nil, 0, 0, { type = "GlobalEffect", effectType = "Buff", effectName = "Infused Channelling", modCond = "FireInfusion" }),
			mod("ColdDamageTakenWhenHit", "MORE", nil, 0, 0, { type = "GlobalEffect", effectType = "Buff", effectName = "Infused Channelling", modCond = "ColdInfusion" }),
			mod("LightningDamageTakenWhenHit", "MORE", nil, 0, 0, { type = "GlobalEffect", effectType = "Buff", effectName = "Infused Channelling", modCond = "LightningInfusion" }),
			mod("ChaosDamageTakenWhenHit", "MORE", nil, 0, 0, { type = "GlobalEffect", effectType = "Buff", effectName = "Infused Channelling", modCond = "ChaosInfusion" }),
		},
		["support_storm_barrier_damage_+%_final"] = {
			mod("Damage", "MORE", nil),
		},
		["support_storm_barrier_skill_type_damage_+%_final"] = {
			mod("Condition:HavePhysicalInfusion", "FLAG", true, 0, 0, { type = "GlobalEffect", effectType = "Buff", effectName = "Infusion", effectCond = "InfusionActive", modCond = "PhysicalInfusion" }),
			mod("Condition:HaveFireInfusion", "FLAG", true, 0, 0, { type = "GlobalEffect", effectType = "Buff", effectName = "Infusion", effectCond = "InfusionActive", modCond = "FireInfusion" }),
			mod("Condition:HaveColdInfusion", "FLAG", true, 0, 0, { type = "GlobalEffect", effectType = "Buff", effectName = "Infusion", effectCond = "InfusionActive", modCond = "ColdInfusion" }),
			mod("Condition:HaveLightningInfusion", "FLAG", true, 0, 0, { type = "GlobalEffect", effectType = "Buff", effectName = "Infusion", effectCond = "InfusionActive", modCond = "LightningInfusion" }),
			mod("Condition:HaveChaosInfusion", "FLAG", true, 0, 0, { type = "GlobalEffect", effectType = "Buff", effectName = "Infusion", effectCond = "InfusionActive", modCond = "ChaosInfusion" }),
		},
	},
#baseMod flag("Condition:PhysicalInfusion", { type = "SkillType", skillType = SkillType.Physical })
#baseMod flag("Condition:FireInfusion", { type = "SkillType", skillType = SkillType.Fire })
#baseMod flag("Condition:ColdInfusion", { type = "SkillType", skillType = SkillType.Cold })
#baseMod flag("Condition:LightningInfusion", { type = "SkillType", skillType = SkillType.Lightning })
#baseMod flag("Condition:ChaosInfusion", { type = "SkillType", skillType = SkillType.Chaos })
#mods

#skill SupportOnslaughtOnSlayingShockedEnemy
	statMap = {
		["support_innervate_minimum_added_lightning_damage"] = {
			mod("LightningMin", "BASE", nil, 0, 0, { type = "GlobalEffect", effectType = "Buff", effectName = "Innervation", effectCond = "InnervationActive" }),
		},
		["support_innervate_maximum_added_lightning_damage"] = {
			mod("LightningMax", "BASE", nil, 0, 0, { type = "GlobalEffect", effectType = "Buff", effectName = "Innervation", effectCond = "InnervationActive" }),
		},
	},
#mods

#skill SupportHandcastSpellBoost
	statMap = {
		["support_spell_boost_area_damage_+%_final_per_charge"] = {
			mod("Damage", "MORE", nil, ModFlag.Area, 0, { type = "Multiplier", var = "Intensity", limitVar = "IntensityLimit" }),
		},
		["support_spell_boost_area_of_effect_+%_final_per_charge"] = {
			mod("AreaOfEffect", "MORE", nil, 0, 0, { type = "Multiplier", var = "Intensity", limitVar = "IntensityLimit" }),
		},
	},
#mods

#skill SupportItemRarity
#mods

#skill SupportLightningPenetration
#mods

#skill SupportLightningPenetrationPlus
#mods

#skill SupportMinionDefensiveStance
	statMap = {
		["support_minion_defensive_stance_minion_damage_taken_+%_final"] = {
			mod("MinionModifier", "LIST", { mod = mod("DamageTaken", "MORE", nil) }),
		},
		["support_minion_defensive_stance_minion_damage_+%_final_against_enemies_near_you"] = {
			mod("MinionModifier", "LIST", { mod = mod("Damage", "MORE", nil) }, bit.band(ModFlag.Hit, ModFlag.Ailment), 0, { type = "Condition", var = "MeatShieldEnemyNearYou" }),
		},
		["minion_block_%"] = {
			mod("MinionModifier", "LIST", { mod = mod("BlockChance", "BASE", nil) }),
		}
	},
#mods

#skill SupportMinefield
	statMap = {
		["support_minefield_mine_throwing_speed_+%_final"] = {
			mod("MineLayingSpeed", "MORE", nil),
		},
	},
#mods

#skill SupportMinionDamage
	statMap = {
		["support_minion_damage_+%_final"] = {
			mod("MinionModifier", "LIST", { mod = mod("Damage", "MORE", nil) }),
		},
	},
#mods

#skill SupportMinionDamagePlus
	statMap = {
		["support_minion_damage_+%_final"] = {
			mod("MinionModifier", "LIST", { mod = mod("Damage", "MORE", nil) }),
		},
	},
#mods

#skill SupportMinionLife
	statMap = {
		["support_minion_maximum_life_+%_final"] = {
			mod("MinionModifier", "LIST", { mod = mod("Life", "MORE", nil) }),
		},
	},
#mods

#skill SupportMinionSpeed
#mods

#skill SupportSummonElementalResistances
	statMap = {
		["support_minion_totem_resistance_elemental_damage_+%_final"] = {
			mod("MinionModifier", "LIST", { mod = mod("ElementalDamage", "MORE", nil) }),
		},
		["minions_inflict_exposure_on_hit_%_chance"] = {
		},
	},
#mods

#skill SupportOvercharge
	statMap = {
		["support_pure_shock_shock_as_though_damage_+%_final"] = {
			mod("ShockAsThoughDealing", "MORE", nil),
		},
		["support_pure_shock_damage_+%_final"] = {
			mod("Damage", "MORE", nil),
		},
	},
#mods

#skill SupportPhysicalToLightning
#mods

#skill SupportPrismaticBurst
	statMap = {
		["trigger_prismatic_burst_on_hit_%_chance"] = {
			-- Display only
		},
	},
#mods

#skill PrismaticBurst
#flags spell area
	parts = {
		{
			name = "Fire",
		},
		{
			name = "Cold",
		},
		{
			name = "Lightning",
		},
	},
	statMap = {
		["prismatic_burst_unchosen_type_damage_-100%_final"] = {
			mod("FireDamage", "MORE", nil, 0, 0, { type = "SkillPart", skillPartList = { 2, 3 } }),
			mod("ColdDamage", "MORE", nil, 0, 0, { type = "SkillPart", skillPartList = { 1, 3 } }),
			mod("LightningDamage", "MORE", nil, 0, 0, { type = "SkillPart", skillPartList = { 1, 2 } }),
			mult = -100,
		},
	},
#baseMod skill("radius", 13)
#mods

#skill SupportProjectileIntensity
	statMap = {
		["additional_projectiles_per_intensity"] = {
			mod("ProjectileCount", "BASE", nil, 0, 0, { type = "Multiplier", var = "Intensity" , limitVar = "IntensityLimit" }),
		},
		["support_greater_projectile_intensity_projectile_damage_+%_final"] = {
			mod("Damage", "MORE", nil, ModFlag.Projectile),
		},
		["greater_projectile_intensity_projectile_damage_+%_final_per_intensity"] = {
			mod("Damage", "MORE", nil, ModFlag.Projectile, 0, { type = "Multiplier", var = "Intensity" , limitVar = "IntensityLimit" }),
		},
	},
#mods

#skill SupportPowerChargeOnCrit
	statMap = {
		["support_power_charge_on_crit_damage_+%_final_per_power_charge"] = {
			mod("Damage", "MORE", nil, 0, 0, { type = "Multiplier", var = "PowerCharge" }),
		},
	},
#mods

#skill SupportRemoteMine
	addFlags = {
		mine = true,
	},
	statMap = {
		["base_skill_show_average_damage_instead_of_dps"] = {
			skill("showAverage", true, { type = "SkillType", skillType = SkillType.Mineable }),
		},
		["support_gem_mine_damage_+%_final"] = {
			mod("Damage", "MORE", nil),
		},
	},
#mods

#skill SupportSacredWisps
	statMap = {
	},
#mods

#skill SummonSacredWisp
	statMap = {
	},
#mods

#skill SupportSacrifice
	statMap = {
		["support_sacrifice_sacrifice_%_of_current_life"] = {
			mod("Multiplier:SacrificePercent", "BASE", nil, 0, 0, { type = "PercentStat", stat = "LifeUnreserved", percent = 1, actor = "parent" }),
		},
		["support_sacrifice_gain_%_of_sacrificed_life_as_added_chaos_damage"] = {
			mod("ChaosMin", "BASE", nil, 0, 0, { type = "Multiplier", var = "SacrificePercent" }),
			mod("ChaosMax", "BASE", nil, 0, 0, { type = "Multiplier", var = "SacrificePercent" }),
			div = 100,
		},
	},
#mods

#skill SupportSpellblade
	statMap = {
		["support_spell_weapon_damage_gain_%_of_one_hand_melee_weapon_damage_as_added_spell_damage"] = {
			mod("OneHandWeaponDamageAppliesToSpells", "MAX", nil),
		},
	},
#mods

#skill SupportSpellCascade
	statMap = {
		["support_spell_cascade_area_of_effect_+%_final"] = {
			mod("AreaOfEffect", "MORE", nil),
		},
		["support_spell_cascade_damage_+%_final"] = {
			mod("Damage", "MORE", nil),
		},
	},
#mods

#skill SupportSpellCascadePlus
	statMap = {
		["support_spell_cascade_area_of_effect_+%_final"] = {
			mod("AreaOfEffect", "MORE", nil),
		},
		["support_spell_cascade_damage_+%_final"] = {
			mod("Damage", "MORE", nil),
		},
	},
#mods

#skill SupportMulticast
	statMap = {
		["support_echo_damage_+%_final"] = {
			mod("Damage", "MORE", nil),
		},
		["support_multicast_cast_speed_+%_final"] = {
			mod("Speed", "MORE", nil, ModFlag.Cast),
		},
	},
#baseMod flag("Condition:HaveSpellEcho")
#mods

#skill SupportSpellEchoPlus
	statMap = {
		["support_echo_damage_+%_final"] = {
			mod("Damage", "MORE", nil),
		},
		["support_multicast_cast_speed_+%_final"] = {
			mod("Speed", "MORE", nil, ModFlag.Cast),
		},
		["spell_echo_plus_chance_double_damage_%_final"] = {
			mod("RepeatFinalDoubleDamageChance", "BASE", nil, ModFlag.Spell, 0, { type = "Condition", var = "CastOnFrostbolt", neg = true }, { type = "Condition", varList = {"averageRepeat", "alwaysFinalRepeat"} }),
		},
	},
#baseMod flag("Condition:HaveSpellEcho")
#mods

#skill SupportSummonGhostOnKill
	addFlags = {
		minion = true,
	},
	addMinionList = {
		"SummonedPhantasm"
	},
	statMap = {
		["base_number_of_support_ghosts_allowed"] = {
			mod("ActivePhantasmLimit", "BASE", nil),
		},
		["phantasm_minimum_added_physical_damage_to_grant"] = {
			mod("PhysicalMin", "BASE", nil, ModFlag.Spell, 0, { type = "PerStat", stat = "ActivePhantasmLimit" }, { type = "GlobalEffect", effectType = "Buff", effectName = "Phantasmal Might", effectCond = "PhantasmalMight" })
		},
		["phantasm_maximum_added_physical_damage_to_grant"] = {
			mod("PhysicalMax", "BASE", nil, ModFlag.Spell, 0, { type = "PerStat", stat = "ActivePhantasmLimit" }, { type = "GlobalEffect", effectType = "Buff", effectName = "Phantasmal Might", effectCond = "PhantasmalMight" })
		}
	},
#mods

#skill SupportRapidActivation
	statMap = {
		["support_rapid_activation_brand_activation_rate_+%_final"] = {
			mod("BrandActivationFrequency", "MORE", nil),
		},
		["support_rapid_activation_brand_skill_only_primary_duration_+%_final"] = {
			mod("PrimaryDuration", "MORE", nil, 0, KeywordFlag.Brand),
		},
		["support_rapid_activation_brand_skill_only_secondary_duration_+%_final"] = {
			mod("SecondaryDuration", "MORE", nil, 0, KeywordFlag.Brand),
		},
	},
#mods

#skill SupportTrinity
	statMap = {
		["elemental_damage_+%_final_per_5_lowest_resonance"] = {
			mod("ElementalDamage", "MORE", nil, 0, 0, { type = "Multiplier", var = "ResonanceCount", div = 5 }),
		},
		["damage_penetrates_%_elemental_resistances_while_all_resonance_is_25"] = {
			mod("ElementalPenetration", "BASE", nil, 0, 0, { type = "MultiplierThreshold", var = "ResonanceCount", threshold = 25 }),
		},
	},
#mods

#skill SupportAilments
	statMap = {
		["support_unbound_ailments_ailment_damage_+%_final"] = {
			mod("Damage", "MORE", nil, 0, bit.bor(KeywordFlag.Bleed, KeywordFlag.Poison, KeywordFlag.Ignite)),
		},
	},
#mods

#skill SupportUnboundAilmentsPlus
	statMap = {
		["support_unbound_ailments_ailment_damage_+%_final"] = {
			mod("Damage", "MORE", nil, 0, bit.bor(KeywordFlag.Bleed, KeywordFlag.Poison, KeywordFlag.Ignite)),
		},
	},
#mods

#skill SupportHandcastAnticipation
	statMap = {
		["support_anticipation_rapid_fire_count"] = {
			mod("SealCount", "BASE", nil),
		},
		["support_anticipation_charge_gain_interval_ms"] = {
			mod("SealGainFrequency", "BASE", nil),
			div = 1000,
		},
		["support_spell_rapid_fire_repeat_use_damage_+%_final"] = {
			mod("SealRepeatPenalty", "MORE", nil),
		},
	},
#baseMod flag("HasSeals")
#mods

#skill SupportUnleashPlus
	statMap = {
		["support_anticipation_rapid_fire_count"] = {
			mod("SealCount", "BASE", nil),
		},
		["support_anticipation_charge_gain_interval_ms"] = {
			mod("SealGainFrequency", "BASE", nil),
			div = 1000,
		},
		["support_spell_rapid_fire_repeat_use_damage_+%_final"] = {
			mod("SealRepeatPenalty", "MORE", nil),
		},
	},
#baseMod flag("HasSeals")
#mods